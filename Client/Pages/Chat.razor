@page "/chat"
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@implements IAsyncDisposable

<AppPageTitle>Chat</AppPageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Chat</MudText>

<MudPaper Elevation="25" Class="pa-4">
    <EditForm Model="@this" OnValidSubmit="async () => await sendButton.InvokeHandler(Send)">
        <DataAnnotationsValidator />

        <MudTextField Label="User" Variant="@Variant.Outlined" Class="mb-2" @bind-Value="User" For="() => User" />

        <MudTextField Label="Message" Variant="@Variant.Outlined" Class="mb-2" @bind-Value="Message" For="() => Message" Lines="3" />

        <MudLoadingButton @ref="sendButton" ButtonType="@ButtonType.Submit" Variant="@Variant.Filled" Icon="@Icons.Material.Filled.Send" Disabled="@(!IsConnected)">Send</MudLoadingButton>
    </EditForm>
</MudPaper>

<MudList>
    @foreach (var message in messages)
    {
        <MudListItem>@message</MudListItem>
    }
</MudList>

@code {
    MudLoadingButton sendButton = default!;

    private List<string> messages = new List<string>();

    [Required]
    public string? User { get; set; }

    [Required]
    [MaxLength(50)]
    public string? Message { get; set; }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubProxy.SendMessage(User!, Message!);
        }
    }

    public Task ReceiveMessage(string user, string message) 
    {
        var encodedMsg = $"{user}: {message}";
        messages.Add(encodedMsg);
        
        StateHasChanged();

        return Task.CompletedTask;
    }
}
