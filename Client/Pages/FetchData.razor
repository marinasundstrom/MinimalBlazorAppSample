@page "/fetchdata"
@inject ISampleDataClient SampleDataClient
@inject ISnackbar Snackbar

<PageTitle>Weather forecast</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (forecasts is null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="forecasts" Striped="true" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="MudBlazor.SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x=>x.Date)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureC)">Temp. (°C)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureF)">Temp. (°F)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.Summary!)">Summary</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date.ToString("g")</MudTd>
            <MudTd DataLabel="Temp. (C)">@context.TemperatureC °C</MudTd>
            <MudTd DataLabel="Temp. (F)">@context.TemperatureF °F</MudTd>
            <MudTd DataLabel="Summary">@context.Summary</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private IEnumerable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            forecasts = await SampleDataClient.GetForecastAsync(DateTime.Now);
        }
        catch(ApiException)
        {
            Snackbar.Add("API exception", Severity.Error);
        }
        catch(HttpRequestException exc)
            when (exc.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal server errors", Severity.Error);
        }
        catch
        {
            Snackbar.Add("Unknown error has occurred", Severity.Error);
        }
    }
}
