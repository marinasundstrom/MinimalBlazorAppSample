@page "/todos"
@inject ITodosClient TodosClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Todos</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Todos</MudText>

<MudButton Variant="@Variant.Text" StartIcon="@Icons.Material.Filled.Add" Hover="true" OnClick="OnAddTodoClicked">New todo</MudButton>

<MudTable @ref="table" ServerData="ServerReload" Hover="true" SortLabel="Sort By" Elevation="0" Loading="@loading">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField T="string" Value="@searchString" ValueChanged="@(s => OnSearch(s))" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="Todo" SortLabel="@nameof(Todo.IsCompleted)">Is Completed</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="Todo" SortLabel="@nameof(Todo.Title)">Title</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="Todo" SortLabel="@nameof(Todo.Created)">Created at</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="Todo" SortLabel="@nameof(Todo.Completed)">Completed at</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="todo">
        <MudTd DataLabel="Is Completed">
            <MudCheckBox Checked="todo.IsCompleted" CheckedChanged="async (bool? value) => await OnTodoCheckedChanged(todo)" ReadOnly="todo.IsCompleted" />
        </MudTd>
        <MudTd DataLabel="Title">@todo.Title</MudTd>
        <MudTd DataLabel="Created at">@todo.Created.ToLocalTime().ToString("g")</MudTd>
        <MudTd DataLabel="Completed at">@(todo.Completed is null ? null : todo.Completed.GetValueOrDefault().ToLocalTime().ToString("g"))</MudTd>
        <MudTd>
            <MudButton Variant="@Variant.Text" StartIcon="@Icons.Material.Filled.Delete" OnClick="async () => await OnDeleteTodoClicked(todo)"></MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 20, 50, 100}" />
    </PagerContent>
</MudTable>


@code {
    MudTable<Todo> table = null!;
    bool loading = false;
    string? searchString = null;

    private async Task OnTodoCheckedChanged(Todo todo)
    {
        try
        {
            var updatedTodo = await TodosClient.MarkTodoAsCompleteAsync(todo.Id);

            todo.IsCompleted = true;
            todo.Completed = updatedTodo.Completed;
        }
        catch(ApiException)
        {
            Snackbar.Add("API exception", Severity.Error);
        }
        catch(HttpRequestException exc)
            when (exc.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal server errors", Severity.Error);
        }
        catch
        {
            Snackbar.Add("Unknown error has occurred", Severity.Error);
        }
    }

    private async Task OnAddTodoClicked()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<AddTodoDialog>("New todo", options);
        var result = await dialogRef.Result;

        if (result.Canceled)
            return;

        await table.ReloadServerData();
    }

    private async Task OnDeleteTodoClicked(Todo todo)
    {
        var result = await DialogService.ShowMessageBox("Delete todo", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        try
        {
            await TodosClient.DeleteTodoAsync(todo.Id);

            await table.ReloadServerData();

            Snackbar.Add("Todo removed", Severity.Info);
        }
        catch(ApiException)
        {
            Snackbar.Add("API exception", Severity.Error);
        }
        catch(HttpRequestException exc)
            when (exc.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal server errors", Severity.Error);
        }
        catch
        {
            Snackbar.Add("Unknown error has occurred", Severity.Error);
        }
    }

    private async Task<TableData<Todo>> ServerReload(TableState state)
    {
        loading = true;

        try
        {
            var result = await TodosClient.GetTodosAsync(state.Page, state.PageSize,
                searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? BlazorApp1.Client.SortDirection.Asc : BlazorApp1.Client.SortDirection.Desc));

            return new TableData<Todo>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        catch(ApiException)
        {
            Snackbar.Add("API exception", Severity.Error);

            return new TableData<Todo>();
        }
        catch(HttpRequestException exc)
            when (exc.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal server errors", Severity.Error);

            return new TableData<Todo>();
        }
        catch
        {
            Snackbar.Add("Unknown error has occurred", Severity.Error);

            return new TableData<Todo>();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await table.ReloadServerData();
    }
}
