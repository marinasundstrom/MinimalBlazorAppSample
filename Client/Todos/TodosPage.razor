@page "/todos"
@inject ITodosClient TodosClient
@inject IDialogService DialogService

<PageTitle>Todos</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Todos</MudText>

@if (noTodos)
{
    <MudText Class="mb-8">No todos found.</MudText>

    <MudButton Variant="@Variant.Text" StartIcon="@Icons.Material.Filled.Add" Class="mt-2" OnClick="OnAddTodoClicked">New todo</MudButton>
}
else if (todos is null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudButton Variant="@Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="OnAddTodoClicked">New todo</MudButton>

    <MudTable Items="todos" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Todo, object>(x=>x.IsCompleted!)">Is Completed</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Todo, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Todo, object>(x=>x.Created)">Created at</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Todo, object>(x=>x.Completed!)">Completed at</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="todo">
            <MudTd DataLabel="Is Completed">
                <MudCheckBox Checked="todo.IsCompleted" CheckedChanged="async (bool? value) => await OnTodoCheckedChanged(todo)" ReadOnly="todo.IsCompleted" />
            </MudTd>
            <MudTd DataLabel="Title">@todo.Title</MudTd>
            <MudTd DataLabel="Created at">@todo.Created.ToLocalTime().ToString("g")</MudTd>
            <MudTd DataLabel="Completed at">@(todo.Completed is null ? null : todo.Completed.GetValueOrDefault().ToLocalTime().ToString("g"))</MudTd>
            <MudTd>
                <MudButton Variant="@Variant.Text" StartIcon="@Icons.Material.Filled.Delete" OnClick="async () => await OnDeleteTodoClicked(todo)"></MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private List<Todo>? todos;
    private bool noTodos;

    protected override async Task OnInitializedAsync()
    {


        await LoadTodos();
    }

    private async Task LoadTodos()
    {
        try
        {
            todos = (await TodosClient.GetTodosAsync()).ToList();
        }
        catch (ApiException exception) when (exception.StatusCode == 204)
        {
            todos = new List<Todo>();
            noTodos = true;
        }
    }

    private async Task OnTodoCheckedChanged(Todo todo)
    {
        var updatedTodo = await TodosClient.MarkTodoAsCompleteAsync(todo.Id);

        todo.IsCompleted = true;
        todo.Completed = updatedTodo.Completed;

    }

    private async Task OnAddTodoClicked()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<AddTodoDialog>("New todo", options);
        var result = await dialogRef.Result;

        if (result.Canceled)
            return;

        todos?.Add((Todo)result.Data);

        noTodos = false;
    }

    private async Task OnDeleteTodoClicked(Todo todo)
    {
        var result = await DialogService.ShowMessageBox("Delete todo", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await TodosClient.DeleteTodoAsync(todo.Id);

        todos?.Remove(todo);
    }
}
