@implements IDisposable
@inject ITodosClient TodosClient
@inject ISnackbar Snackbar

<EditForm Model="@this" OnValidSubmit="async () => await submitButton.InvokeHandler(Submit)">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            <MudTextField Label="Title" Lines="3" Variant="@Variant.Outlined" @bind-Value="Title" For="() => Title" HelperText="What is this todo about?" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudLoadingButton @ref="submitButton" ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudLoadingButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    MudLoadingButton submitButton = default!;
    CancellationTokenSource cts = new ();

    [Parameter]
    [Required]
    public string Title { get; set; } = default!;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    async Task Submit()
    {
        #if DEBUG
        await Task.Delay(1000);
        #endif

        try
        { 
            //throw new Exception();

            var todo = await TodosClient.AddTodoAsync(new AddTodoRequest()
            {
                Title = Title
            }, cts.Token);

            MudDialog.Close(DialogResult.Ok(todo));
        }
        catch(ApiException)
        {
            Snackbar.Add("API exception", Severity.Error);
        }
        catch(HttpRequestException exc)
            when (exc.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal server errors", Severity.Error);
        }
        catch(TaskCanceledException)
        {
            
        }
        catch
        {
            Snackbar.Add("Unknown error has occurred", Severity.Error);
        }
    }

    void Cancel() => MudDialog.Cancel();

    public void Dispose() 
    {
        cts.Cancel();
        cts.Dispose();
    }
}