@implements IDisposable

<MudButton ButtonType="@ButtonType" Disabled="@Disabled" OnClick="ProcessSomething" Variant="@Variant" Color="@((_processing ? LoadingColor : (_success ? SuccessColor : (_error ? ErrorColor : Color))).GetValueOrDefault())" Size="@Size">
    @if (_processing)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" Color="MudBlazor.Color.Inherit"/>
        @if(LoadingText is not null) 
        {
            <span class="ms-2">@LoadingText</span>
        }
    }
    else if(_error && !(ErrorText is null && ErrorIcon is null))
    {
        if(ErrorIcon is not null) 
        {
            <MudIcon Class="ms-n1" Size="Size.Small" Icon="@ErrorIcon" />
        }
        if(ErrorText is not null) 
        {
            <span class="@(ErrorIcon is not null ? "ms-2" : string.Empty)">@ErrorText</span>
        }
    }
    else if(_success  && !(SuccessText is null && SuccessIcon is null))
    {
        if(SuccessIcon is not null) 
        {
            <MudIcon Class="ms-n1" Size="Size.Small" Icon="@SuccessIcon" />
        }
        if(ErrorText is not null) 
        {
            <span class="@(SuccessIcon is not null ? "ms-2" : string.Empty)">@SuccessText</span>
        }
    }
    else
    {
        if(Icon is not null) 
        {
            <MudIcon Class="ms-n1" Size="Size.Small" Icon="@Icon" />
        }
        if(ChildContent is not null) 
        {
            <span class="@(Icon is not null ? "ms-2" : string.Empty)">@ChildContent</span>
        }
    }
</MudButton>

@code {
    private bool _processing = false;
    private bool _success =  false;
    private bool _error =  false;
    private CancellationTokenSource? cts;
    private CancellationTokenSource? resetCts;
    private Task? resetTask;

    [Parameter] public ButtonType ButtonType { get; set; } = MudBlazor.ButtonType.Button;

    [Parameter] public bool Disabled { get; set; }

    [Parameter] public string? Icon { get; set; }

    [Parameter] public EventCallback OnClick { get; set; } = default!;

    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    [Parameter] public Color? LoadingColor { get; set; } = MudBlazor.Color.Default;

    [Parameter] public string? LoadingText { get; set; }

    [Parameter] public string? ErrorIcon { get; set; } = Icons.Material.Filled.Error;

    [Parameter] public Color? ErrorColor { get; set; } = MudBlazor.Color.Error;

    [Parameter] public string? ErrorText { get; set; } = "Try again";

    [Parameter] public string? SuccessIcon { get; set; } = Icons.Material.Filled.Check;

    [Parameter] public Color? SuccessColor { get; set; } = MudBlazor.Color.Success;

    [Parameter] public string? SuccessText { get; set; } = "Success";

    [Parameter] public Variant Variant { get; set; } = MudBlazor.Variant.Text;

    [Parameter] public Color Color { get; set; } = MudBlazor.Color.Default;

    [Parameter] public Size Size { get; set; } = MudBlazor.Size.Medium;

    /// <summary>
    /// The time after which the button shows the processing state.
    /// </summary>
    [Parameter] public TimeSpan Timeout { get; set; } = TimeSpan.FromSeconds(0);

    /// <summary>
    /// The time after which the button will reset.
    /// </summary>
    [Parameter] public TimeSpan ResetTime { get; set; } = TimeSpan.FromSeconds(2);

    [Parameter] public bool ResetOnSuccess { get; set; } = true;

    [Parameter] public bool ResetOnFailure { get; set; } = true;

    public void Reset() 
    {    
        cts?.Cancel();    
        resetCts?.Cancel();

        ResetCore();
    }

    private void ResetCore() 
    {
        _processing = false;
        _error = false;
        _success = false;
    }

    public Func<Task> Decorate(Func<Task> handler)
    {
        return async () => await InvokeHandler(handler);
    }

    public async Task InvokeHandler(Func<Task> handler)
    {
        _success =  false;
        _error = false;

        resetCts?.Cancel();

        cts = new ();
        Task? t = null;

        try 
        {
            if(Timeout.TotalMilliseconds > 0) 
            {
                t = Task.Delay(Timeout, cts.Token).ContinueWith((task) => { 
                        _processing = true;
                        InvokeAsync(StateHasChanged); 
                    }, cts.Token);
            }
            else
            {
                _processing = true;
            }

            await handler();

            _success =  true;

            StateHasChanged();
        }
        catch(TaskCanceledException)
        {

        }
        catch
        {
            _error = true;
        }
        finally 
        {
            cts.Cancel();
            _processing = false;
            
            if(ResetTime.TotalMilliseconds > 0 && ((_success && ResetOnSuccess) || (_error && ResetOnFailure))) 
            {
                resetCts = new CancellationTokenSource();

                resetTask = Task.Delay(ResetTime, resetCts.Token).ContinueWith((task) => { 
                    ResetCore();
                    InvokeAsync(StateHasChanged);
                }, resetCts.Token);
            }
        }
    }

    async Task ProcessSomething()
    {
        if(_processing) 
        {
            return;
        }
        
        if (EditContext is null && CascadedEditContext is not null)
        {
            EditContext = CascadedEditContext;
            EditContext.OnValidationStateChanged += OnValidationStateChanged;
        }

        if (EditContext is not null)
        {
            if(!EditContext.Validate()) 
            {
                ResetCore();
                return;
            }
        }

        await InvokeHandler(async () => {
            await OnClick.InvokeAsync();
        });
    }

    [CascadingParameter] private EditContext? CascadedEditContext { get; set; }

    private EditContext? EditContext { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {        
        if (EditContext is null && CascadedEditContext is not null)
        {
            EditContext = CascadedEditContext;
            EditContext.OnValidationStateChanged += OnValidationStateChanged;
        }

        await base.SetParametersAsync(parameters);
    }

    private void OnValidationStateChanged(object? sender, ValidationStateChangedEventArgs eargs) 
    {
        bool isValid = EditContext!.GetValidationMessages().Count() == 0;

        Disabled = !isValid;

        StateHasChanged();
    }

    public void Dispose() 
    {
        if(EditContext is null) return;

        EditContext.OnValidationStateChanged -= OnValidationStateChanged;
        EditContext = null;
    }
}